#!/usr/bin/env bash
# shellcheck disable=SC2016,SC2120 source=/dev/null

# Enable "strict mode". See: <http://redsymbol.net/articles/unofficial-bash-strict-mode>
set -euo pipefail
# Load logging library
source ./lib/log.sh
# Command line arguments
readonly ARGS=("${@:-}")

# Displays the help for this program
help() {
    printf '%s\n' \
        'Nix installer for macOS' \
        '' \
        'USAGE:' \
        '    install [OPTIONS]' \
        '' \
        'OPTIONS:' \
        '    -h, --help                Print help information' \
        '    -l, --log <LEVEL>         Set the log level: none, error, info, debug, trace [default: info]' \
        '    -q, --quiet               Disable non-error logs; alias of `--log error`' \
        '    -s, --silent              Disable all logs; alias of `--log none`' \
        '    -v, --verbose             Enable all logs; alias of `--log trace`' \
        '' \
        '    --config                  Set the Nix config [default: $user-$arch]' \
        '    --no-install-xcode        Do not install Xcode cli tools' \
        '    --no-install-nix          Do not install Nix' \
        '    --no-install-nix-darwin   Do not install nix-darwin' \
        '    --no-config               Do not generate config file' \
        '    --no-bootstrap            Do not bootstrap system' \
        '    --force-bootstrap         Forcibly bootstrap the system'
}

cpu_arch() {
    local arch
    arch="$(uname -m)"

    case "$arch" in
        arm64) arch="aarch64" ;;
    esac

    echo "$arch"
}

# Initialize the program options
init_options() {
    CONFIG_USERNAME="$(id -un)"
    CONFIG_HOME="/Users/$CONFIG_USERNAME"
    INSTALL_XCODE=true
    INSTALL_NIX=true
    INSTALL_NIX_DARWIN=true
    SHOULD_BOOTSTRAP=true
    FORCE_BOOTSTRAP=false
    SRC_PATH="$(cd -- "$(dirname "$0")" >/dev/null 2>&1 && pwd -P)"
}

# Parses the command line arguments
parse_args() {
    local positional_args=()

    while [[ $# -gt 0 ]]; do
        case $1 in
        -h | --help)
            help && exit
            ;;
        -l | --log)
            if [ -z "${2:-}" ]; then error "expected log level" && exit "$NO_PANIC"; fi
            local level
            { level=$(log_value "$2" | tee /dev/fd/3); } 3>&1
            LOG="$level"
            shift && shift
            ;;
        -v | --verbose)
            LOG="$LOG_TRACE" && shift
            ;;
        -q | --quiet)
            LOG="$LOG_ERROR" && shift
            ;;
        -s | --silent)
            LOG="$LOG_NONE" && shift
            ;;
        --config)
            if [ -z "${2:-}" ]; then error "expected config" && exit "$NO_PANIC"; fi
            CONFIG="$2" && shift && shift
            ;;
        --no-install-xcode)
            INSTALL_XCODE=false && shift
            ;;
        --no-install-nix)
            INSTALL_NIX=false && shift
            ;;
        --no-install-nix-darwin)
            INSTALL_NIX_DARWIN=false && shift
            ;;
        --no-bootstrap)
            SHOULD_BOOTSTRAP=false && shift
            ;;
        --force-bootstrap)
            FORCE_BOOTSTRAP=true && shift
            ;;
        --* | -*)
            error "unknown option '$1'" && help && exit "$NO_PANIC"
            ;;
        *)
            positional_args+=("$1") && shift
            ;;
        esac
    done

    CONFIG="$CONFIG_USERNAME-$(cpu_arch)"

    if ! id "$CONFIG_USERNAME" &>/dev/null; then
        error "user '$CONFIG_USERNAME' doesn't exist" && exit "$NO_PANIC"
    fi

    if [ ! -d "$CONFIG_HOME" ]; then
        error "home directory '$CONFIG_HOME' doesn't exist" && exit "$NO_PANIC"
    fi

    debug "parsed command line arguments"
    trace "log=$LOG"
    trace "config='$CONFIG'"
    trace "home='$CONFIG_HOME'"
    trace "should_bootstrap=$SHOULD_BOOTSTRAP"
    trace "force_bootstrap=$FORCE_BOOTSTRAP"
    trace "src_path='$SRC_PATH'"
}

# Checks the execution requirements are met
check_requirements() {
    local os
    local arch
    os="$(uname -s)"
    arch="$(cpu_arch)"

    case "$os" in
    Darwin) ;;
    *) error "unsupported operating system '$os'" && exit "$NO_PANIC" ;;
    esac

    case "$arch" in
    aarch64 | x86_64) ;;
    *) error "unsupported architecture '$arch'" && exit "$NO_PANIC" ;;
    esac

    debug "os='$os', arch='$arch'"
}

# Installs XCode CLI tools
install_xcode_cli_tools() {
    if xcode-select -p 1>/dev/null; then
        debug 'xcode cli tools already installed, skipping'
        return
    fi

    info 'fetching latest xcode cli tools version'
    local xcode_version
    xcode_version="$(
        softwareupdate --list |
            grep --extended-regexp --only-matching "Command Line Tools for Xcode-\d+\.\d+" |
            head --lines 1
    )"
    info "got '$xcode_version', installing..."
    run "softwareupdate --install '$xcode_version'"
}

# Installs Nix
install_nix() {
    if command -v nix &>/dev/null; then
        debug 'nix already installed, skipping'
        return
    fi

    local path
    path="$(mktemp -d)"
    local profile='/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh'
    info 'installing nix...'
    debug "changing directory path='$path'" && cd "$path"
    run 'curl --proto =https --tlsv1.2 -sfSL https://nixos.org/nix/install >nix-installer'
    run 'chmod +x nix-installer'
    run 'true | ./nix-installer'

    set +u && . $profile && set -u
    debug "nix sourced profile='$profile' PATH='$PATH'"
}

# Ensures /etc/nix/nix.conf is a symlink
check_nix_conf_is_symlink() {
    if [ ! -L /etc/nix/nix.conf ]; then
        info "moving nix config from /etc/nix/nix.conf to /etc/nix/nix.conf.old"
        run 'sudo mv -n /etc/nix/nix.conf /etc/nix/nix.conf.old'
    else
        debug '/etc/nix/nix.conf is a symlink, skipping'
    fi
}

# Installs nix-darwin
install_nix_darwin() {
    if command -v darwin-rebuild &>/dev/null; then
        debug 'nix-darwin already installed, skipping'
        return
    fi

    info 'installing nix-darwin...'

    local path
    path="$(mktemp -d)"
    local profile='/etc/static/bashrc'
    debug "changing directory path='$path'" && cd "$path"
    run "nix-build --quiet --no-build-output https://github.com/LnL7/nix-darwin/archive/master.tar.gz --attr installer"
    debug "changing directory path='$path/result/bin'" && cd "$path/result/bin"
    check_nix_conf_is_symlink
    run "true | ./darwin-installer"
    set +u && . $profile && set -u
    debug "nix-darwin sourced profile='$profile' PATH='$PATH'"
}

# Bootstraps the system
bootstrap_system() {
    if ! $FORCE_BOOTSTRAP && [ -d "/etc/profiles/per-user/$CONFIG_USERNAME" ]; then
        debug 'system already bootstrapped, skipping'
        return
    fi

    local config="$1"
    info "building system '$config'..."
    debug "changing directory path='$SRC_PATH'" && cd "$SRC_PATH"
    run "nix build .#darwinConfigurations.$config.system --extra-experimental-features 'nix-command flakes'"
    info "bootstrapping system '$config'..."
    check_nix_conf_is_symlink
    run "./result/sw/bin/darwin-rebuild switch --flake .#$config"
    run "rm -f result"
    run "sudo -i nix-env -e nix"
}

main() {
    init_options
    parse_args "${ARGS[@]}"
    check_requirements

    if $INSTALL_XCODE; then
        install_xcode_cli_tools
    fi

    if $INSTALL_NIX; then
        install_nix
    fi

    if $INSTALL_NIX_DARWIN; then
        install_nix_darwin
    fi

    if $SHOULD_BOOTSTRAP; then
        bootstrap_system "$CONFIG"
    fi

    info "done!"
}

main
